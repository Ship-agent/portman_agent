name: Terraform Deployment

on:
  push:
    #branches:
    #  - main  # Runs on push to main
  workflow_dispatch:  # Allows manual execution

permissions:
  id-token: write
  contents: read

jobs:
  tf-unit-tests:
    name: Terraform Unit Tests
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend=false

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

      # Run Terraform Plan (Preview Changes)
      #- name: Terraform Plan
      #  run: terraform plan -out=tfplan

  tf-plan:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: tf-unit-tests  # Apply only if tests pass
    environment: development  # Use environment for GitHub Secrets

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        
      # Run Terraform Plan (Preview Changes)
      - name: Terraform Plan
        run: terraform plan -out=tfplan

  tf-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: tf-plan  # Apply only if plan passes
    environment: development  # Use environment for GitHub Secrets

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Apply Terraform changes
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  tf-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Only runs manually
    environment: development  # Uses correct environment

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
