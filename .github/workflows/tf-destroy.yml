name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select deployment environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - testing
          - production

permissions:
  id-token: write
  contents: read

jobs:
  tf-plan-destroy:
    name: Terraform Plan Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'development' }}

    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Terraform Environment Variables
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          terraform -chdir=environments/${{ env.ENVIRONMENT }} init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}.tfstate"

      - name: Terraform Plan Destroy
        id: tf-destroy-plan
        run: |
          terraform -chdir=environments/${{ env.ENVIRONMENT }} plan -destroy \
            -var-file=terraform.tfvars \
            -var="admin_password=${{ secrets.DB_PASSWORD }}" \
            -var="naming_prefix=${{ vars.NAMING_PREFIX }}" \
            -var="resource_group_owner_tag_value=${{ vars.OWNER_TAG }}" \
            -var="storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }}" \
            -out=tfdestroyplan
          echo "Terraform Destroy Plan generated. Review before running apply."

      - name: Upload Terraform Destroy Plan
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: tf-destroy-plan
          path: environments/${{ env.ENVIRONMENT }}/tfdestroyplan

      - name: Notify for Manual Approval
        run: |
          echo "ðŸš¨ Terraform Destroy Plan is ready for review."
          echo "âœ… If approved, manually trigger 'Terraform Apply Destroy' from GitHub Actions."

  tf-plan-approval:
    name: Terraform Plan Approval
    runs-on: ubuntu-latest
    needs: tf-plan-destroy
    if: success() # Only proceed if terraform-plan job succeeds
    
    permissions:
      issues: write

    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: herratomsiili # Replace with GitHub usernames, with the free version you can only have an issue assigned to one username
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform Apply Destroy"
          issue-body: "Please approve or deny the destroy deployment."

  tf-apply-destroy:
    name: Terraform Apply Destroy
    runs-on: ubuntu-latest
    needs: tf-plan-approval
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'development' }}

    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Terraform Environment Variables
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          terraform -chdir=environments/${{ env.ENVIRONMENT }} init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}.tfstate"

      - name: Download Terraform Destroy Plan
        uses: actions/download-artifact@v4
        with:
          name: tf-destroy-plan
          path: environments/${{ env.ENVIRONMENT }}/

      - name: Terraform Apply Destroy
        run: terraform -chdir=environments/${{ env.ENVIRONMENT }} apply -auto-approve tfdestroyplan
