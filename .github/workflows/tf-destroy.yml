name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select deployment environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - testing
          - production

permissions:
  id-token: write
  contents: read

jobs:
  tf-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Only runs manually
    environment: ${{ github.event.inputs.environment || 'development' }}  # Use selected environment

    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Terraform Environment Variables
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform -chdir=environments/${{ env.ENVIRONMENT }} init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.BACKEND_STATE_FILE }}" \

      - name: Show Destroy plan
        id: tf-destroy-plan-step
        run: |
          terraform -chdir=environments/${{ env.ENVIRONMENT }} plan -destroy -out=tfplan
          echo "Terraform Destroy Plan generated."

      - name: Require Manual Approval for Destroy
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          required: true  # Ensures manual approval before executing destroy

      # Step 2: Apply Terraform Destroy after manual approval
      - name: Terraform Apply Destroy
        if: github.event_name == 'workflow_dispatch'  # Ensures only runs when triggered manually
        run: |
          terraform -chdir=environments/${{ env.ENVIRONMENT }} apply -auto-approve tfplan

      #- name: Terraform Destroy
      #  run: terraform destroy -auto-approve
      #  #run: terraform -chdir=environments/${{ env.ENVIRONMENT }} destroy -auto-approve tfplan
